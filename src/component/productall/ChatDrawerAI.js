// src/components/ChatDrawerAI.jsx
import { QuestionCircleOutlined } from '@ant-design/icons';
import {
  Avatar,
  Button,
  Drawer,
  Image,
  Input,
  List,
  Modal,
  Typography,
} from 'antd';
import { useEffect, useRef, useState } from 'react';
import './ChatDrawerAI.css';

const SESSION_KEY = 'chat_ai_messages';

const ChatDrawerAI = ({ open, onClose }) => {
  const [newMsg, setNewMsg] = useState('');
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);
  const scrollRef = useRef(null);
  // th√™m ref cho input
  const inputRef = useRef(null);

  const suggestedQuestions = [
    'L√†m sao ƒë·ªÉ ƒë·∫∑t l·ªãch x√©t nghi·ªám?',
    'C∆° s·ªü x√©t nghi·ªám n√†o g·∫ßn t√¥i nh·∫•t?',
    'T·ªïng quan v·ªÅ c√¥ng ty c·ªßa b·∫°n?',
    'C√°c g√≥i x√©t nghi·ªám NIPT?',
    'C√°c g√≥i x√©t nghi·ªám ADN?',
    'B·∫°n c√≥ th·ªÉ cung c·∫•p nh·ªØng d·ªãch v·ª• n√†o?',
    'Chi ph√≠ x√©t nghi·ªám t·ªïng qu√°t l√† bao nhi√™u?',
    'T√¥i c√≥ th·ªÉ l·∫•y m·∫´u t·∫°i nh√† kh√¥ng?',
    'C√≥ th·ªÉ thanh to√°n b·∫±ng b·∫£o hi·ªÉm y t·∫ø kh√¥ng?',
    'X√©t nghi·ªám c·∫ßn bao l√¢u ƒë·ªÉ c√≥ k·∫øt qu·∫£?',
    'Tr·∫ª em c√≥ th·ªÉ l√†m x√©t nghi·ªám m√°u ƒë∆∞·ª£c kh√¥ng?',
    'T√¥i c√≥ th·ªÉ ƒë·∫∑t l·ªãch cho ng∆∞·ªùi th√¢n kh√¥ng?',
    'X√©t nghi·ªám c√≥ ·∫£nh h∆∞·ªüng g√¨ ƒë·∫øn s·ª©c kh·ªèe kh√¥ng?',
    'L√†m sao ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£ x√©t nghi·ªám online?',
    'C√≥ c·∫ßn nh·ªãn ti·ªÉu khi l√†m x√©t nghi·ªám n∆∞·ªõc ti·ªÉu kh√¥ng?',
    'Ph√≤ng x√©t nghi·ªám ho·∫°t ƒë·ªông v√†o cu·ªëi tu·∫ßn kh√¥ng?',
    'X√©t nghi·ªám ƒë·ªãnh k·ª≥ c√≥ ph√°t hi·ªán b·ªánh ti·ªÅm ·∫©n kh√¥ng?',
    'T√¥i c√≥ th·ªÉ ch·ªçn b√°c sƒ© khi ƒë·∫∑t l·ªãch kh√¥ng?',
    'L·∫•y m·∫´u m√°u c√≥ ƒëau kh√¥ng?',
    'Sau khi x√©t nghi·ªám c√≥ c·∫ßn ngh·ªâ ng∆°i kh√¥ng?',
  ];

  // Fetch t·ª´ API
  const askQuestion1 = async (question) => {
    try {
      const response = await fetch(
        'https://advanced-bengal-many.ngrok-free.app/webhook/ai-train-GPT',
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message: question,
            sessionId: '111',
          }),
        }
      );
      const data = await response.json();
      return data.output;
    } catch (error) {
      console.error('L·ªói:', error);
      return 'ƒê√£ c√≥ l·ªói x·∫£y ra.';
    }
  };

  // G·ª≠i tin nh·∫Øn
  const sendMessage = async () => {
    if (!newMsg.trim()) return;

    const userMessage = {
      id: Date.now(),
      fromUser: true,
      content: newMsg.trim(),
      timestamp: new Date().toISOString(),
    };

    const updatedMessages = [...messages, userMessage];
    setMessages(updatedMessages);
    setNewMsg('');
    setLoading(true);
    sessionStorage.setItem(SESSION_KEY, JSON.stringify(updatedMessages));

    const reply = await askQuestion1(userMessage.content);

    const aiMessage = {
      id: Date.now() + 1,
      fromUser: false,
      content: reply,
      timestamp: new Date().toISOString(),
    };

    const finalMessages = [...updatedMessages, aiMessage];
    setMessages(finalMessages);
    setLoading(false);
    sessionStorage.setItem(SESSION_KEY, JSON.stringify(finalMessages));
  };

  // Load d·ªØ li·ªáu khi m·ªü Drawer
  useEffect(() => {
    if (open) {
      const saved = sessionStorage.getItem(SESSION_KEY);
      if (saved) {
        setMessages(JSON.parse(saved));
      } else {
        const greeting = {
          id: Date.now(),
          fromUser: false,
          content:
            'üëã Xin ch√†o, t√¥i l√† tr·ª£ l√Ω AI c·ªßa GenNovaX. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·∫∑t l·ªãch, t∆∞ v·∫•n x√©t nghi·ªám v√† gi·∫£i ƒë√°p c√°c c√¢u h·ªèi s·ª©c kh·ªèe. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?',
          timestamp: new Date().toISOString(),
        };
        setMessages([greeting]);
        sessionStorage.setItem(SESSION_KEY, JSON.stringify([greeting]));
      }
    }
  }, [open]);

  // Auto scroll
  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [messages, loading]);
  useEffect(() => {
    if (newMsg && inputRef.current) {
      inputRef.current.focus();
    }
  }, [newMsg]);

  // Regex link render (markdown link)
  const renderLine = (line, index) => {
    const markdownLinkRegex =
      /\[([^\]]+)\]\((https:\/\/genapp\.vn\/y-te\/dat-lich-xet-nghiem)\)/g;

    const parts = [];
    let lastIndex = 0;
    let match;

    while ((match = markdownLinkRegex.exec(line)) !== null) {
      const [fullMatch, text, url] = match;
      const start = match.index;

      if (start > lastIndex) {
        parts.push(
          <span key={`${index}-text-${start}`}>
            {line.slice(lastIndex, start)}
          </span>
        );
      }

      parts.push(
        <a
          key={`${index}-link-${start}`}
          href={url}
          target="_blank"
          rel="noopener noreferrer"
          style={{
            color: '#1677ff',
            textDecoration: 'underline',
            wordBreak: 'break-word',
          }}
        >
          {text}
        </a>
      );

      lastIndex = start + fullMatch.length;
    }

    if (lastIndex < line.length) {
      parts.push(<span key={`${index}-rest`}>{line.slice(lastIndex)}</span>);
    }

    return parts.length ? <>{parts}</> : <span key={index}>{line}</span>;
  };

  // X·ª≠ l√Ω lo·∫°i b·ªè link ·∫£nh c·ª• th·ªÉ v√† render ·∫£nh ph√≠a tr√™n
  const IMAGE_LINK =
    '(https://res.cloudinary.com/dh3rdryux/image/upload/v1757389920/z6992270543389_473881ffd3549bf4a273390960f43bbc_k3hhf3.jpg)';

  const renderMessageContent = (m) => {
    if (!m.fromUser) {
      // N·∫øu c√≥ ch·ª©a link ·∫£nh
      if (m.content.includes(IMAGE_LINK)) {
        const textWithoutLink = m.content.replace(IMAGE_LINK, '').trim();
        return (
          <div>
            <Image
              src={IMAGE_LINK.slice(1, -1)} // b·ªè ngo·∫∑c ()
              alt="AI g·ª£i √Ω"
              style={{
                maxWidth: '100%',
                borderRadius: 8,
                marginBottom: 8,
              }}
              preview={true} // b·∫≠t ph√≥ng to khi click
            />
            {textWithoutLink.split('\n').map((line, index) => (
              <div key={index}>{renderLine(line, index)}</div>
            ))}
          </div>
        );
      }
    }
    // Kh√¥ng c√≥ link th√¨ render b√¨nh th∆∞·ªùng
    return m.content
      .split('\n')
      .map((line, index) => <div key={index}>{renderLine(line, index)}</div>);
  };

  return (
    <Drawer
      open={open}
      onClose={onClose}
      width={700}
      destroyOnClose={false}
      title="Tr√≤ chuy·ªán v·ªõi AI"
      bodyStyle={{ display: 'flex', flexDirection: 'column', padding: 0 }}
    >
      {/* Modal g·ª£i √Ω */}
      <Modal
        title="üß† Ch·ªçn c√¢u h·ªèi g·ª£i √Ω"
        open={modalOpen}
        onCancel={() => setModalOpen(false)}
        footer={null}
        afterClose={() => {
          if (inputRef.current) {
            inputRef.current.focus();
          }
        }}
      >
        <div style={{ maxHeight: 400, overflowY: 'auto', paddingRight: 8 }}>
          <List
            dataSource={suggestedQuestions}
            renderItem={(item) => (
              <div
                style={{
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  padding: '8px 0',
                  gap: 8,
                }}
                onClick={() => {
                  setNewMsg(item);
                  setModalOpen(false);
                }}
              >
                <QuestionCircleOutlined style={{ color: '#1677ff' }} />
                <Typography.Text>{item}</Typography.Text>
              </div>
            )}
          />
        </div>
      </Modal>

      {/* V√πng tin nh·∫Øn */}
      <div
        ref={scrollRef}
        style={{
          flex: 1,
          padding: 16,
          overflowY: 'auto',
          background: '#fafafa',
        }}
      >
        {messages.map((m) => (
          <div
            key={m.id}
            style={{
              display: 'flex',
              justifyContent: m.fromUser ? 'flex-end' : 'flex-start',
              marginBottom: 8,
              alignItems: 'flex-start',
            }}
          >
            {!m.fromUser && (
              <Avatar src="https://i.pinimg.com/236x/a6/3f/b8/a63fb8726fd60309aa2041b6a9d25777.jpg" />
            )}
            <div
              style={{
                background: m.fromUser ? '#1677ff' : '#f0f0f0',
                color: m.fromUser ? '#fff' : '#000',
                padding: '8px 12px',
                borderRadius: 16,
                maxWidth: '70%',
                whiteSpace: 'pre-wrap',
                marginLeft: 5,
              }}
            >
              {renderMessageContent(m)}
            </div>
          </div>
        ))}
        {loading && (
          <div
            style={{
              display: 'flex',
              justifyContent: 'flex-start',
              marginBottom: 8,
            }}
          >
            <div className="typing-indicator">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
        )}
      </div>

      {/* Nh·∫≠p v√† g·ª≠i */}
      <div
        style={{
          padding: 16,
          borderTop: '1px solid #f0f0f0',
          display: 'flex',
          flexDirection: 'column',
          gap: 8,
        }}
      >
        <div>
          <Button
            icon={<QuestionCircleOutlined />}
            style={{
              backgroundColor: '#1677ff',
              color: 'white',
              padding: '0 12px',
              height: 32,
              fontSize: 14,
              borderRadius: 6,
              border: 'none',
            }}
            onMouseEnter={() => setModalOpen(true)}
          >
            C√¢u h·ªèi g·ª£i √Ω
          </Button>
        </div>

        <div style={{ display: 'flex', gap: 8 }}>
          <Input.TextArea
            ref={inputRef} // üëà th√™m ref
            autoSize={{ minRows: 1, maxRows: 4 }}
            value={newMsg}
            onChange={(e) => setNewMsg(e.target.value)}
            placeholder="Nh·∫≠p tin nh·∫Øn‚Ä¶"
            onPressEnter={(e) => {
              if (!e.shiftKey) {
                e.preventDefault();
                sendMessage();
              }
            }}
          />

          <Button type="primary" onClick={sendMessage} disabled={loading}>
            G·ª≠i
          </Button>
        </div>
      </div>
    </Drawer>
  );
};

export default ChatDrawerAI;
